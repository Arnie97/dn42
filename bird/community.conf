function community_rtt(int rtt)
{
	bgp_community.add((dn42_comm, rtt));

	if (dn42_comm, 9) ~ bgp_community then {
		bgp_community.delete([(dn42_comm, 1..8)]); return 9;
	} else if (dn42_comm, 8) ~ bgp_community then {
		bgp_community.delete([(dn42_comm, 1..7)]); return 8;
	} else if (dn42_comm, 7) ~ bgp_community then {
		bgp_community.delete([(dn42_comm, 1..6)]); return 7;
	} else if (dn42_comm, 6) ~ bgp_community then {
		bgp_community.delete([(dn42_comm, 1..5)]); return 6;
	} else if (dn42_comm, 5) ~ bgp_community then {
		bgp_community.delete([(dn42_comm, 1..4)]); return 5;
	} else if (dn42_comm, 4) ~ bgp_community then {
		bgp_community.delete([(dn42_comm, 1..3)]); return 4;
	} else if (dn42_comm, 3) ~ bgp_community then {
		bgp_community.delete([(dn42_comm, 1..2)]); return 3;
	} else if (dn42_comm, 2) ~ bgp_community then {
		bgp_community.delete([(dn42_comm, 1..1)]); return 2;
	} else {
		return 1;
	}
}


function community_bandwidth(int bandwidth)
{
	bgp_community.add((dn42_comm, bandwidth));

	if (dn42_comm, 21) ~ bgp_community then {
		bgp_community.delete([(dn42_comm, 22..29)]); return 21;
	} else if (dn42_comm, 22) ~ bgp_community then {
		bgp_community.delete([(dn42_comm, 23..29)]); return 22;
	} else if (dn42_comm, 23) ~ bgp_community then {
		bgp_community.delete([(dn42_comm, 24..29)]); return 23;
	} else if (dn42_comm, 24) ~ bgp_community then {
		bgp_community.delete([(dn42_comm, 25..29)]); return 24;
	} else if (dn42_comm, 25) ~ bgp_community then {
		bgp_community.delete([(dn42_comm, 26..29)]); return 25;
	} else if (dn42_comm, 26) ~ bgp_community then {
		bgp_community.delete([(dn42_comm, 27..29)]); return 26;
	} else if (dn42_comm, 27) ~ bgp_community then {
		bgp_community.delete([(dn42_comm, 28..29)]); return 27;
	} else if (dn42_comm, 28) ~ bgp_community then {
		bgp_community.delete([(dn42_comm, 29..29)]); return 28;
	} else {
		return 29;
	}
}


function community_crypto(int crypto)
{
	bgp_community.add((dn42_comm, crypto));

	if (dn42_comm, 31) ~ bgp_community then {
		bgp_community.delete([(dn42_comm, 32..34)]); return 31;
	} else if (dn42_comm, 32) ~ bgp_community then {
		bgp_community.delete([(dn42_comm, 33..34)]); return 32;
	} else if (dn42_comm, 33) ~ bgp_community then {
		bgp_community.delete([(dn42_comm, 34..34)]); return 33;
	} else {
		return 34;
	}
}


function community(int rtt; int bw; int crypto)
{
	bgp_local_pref = 150 + community_bandwidth(bw) - community_rtt(rtt) - bgp_path.len;
	community_crypto(crypto);
	if source = RTS_STATIC then {
		bgp_community.add((dn42_comm, my_region));
	}
}


function im_filter_community(int rtt; int bw; int crypto; bool site; bool universe)
{
	community(rtt, bw, crypto);
	im_filter(site, universe);
}


function ex_filter_community(int rtt; int bw; int crypto; bool site)
{
	community(rtt, bw, crypto);
	ex_filter(site);
}
