router id my_ipv4;

# Tables master4 and master6 are defined by default
# ipv4 table master4;
# ipv6 table master6;

# Define more tables, e.g. for policy routing or as MRIB
# ipv4 table mrib4;
# ipv6 table mrib6;

roa4 table dn42_roa4;
roa6 table dn42_roa6;

protocol static _roa4 {
	roa4 { table dn42_roa4; };
	include "dn42_roa_bird2_4.conf";
};

protocol static _roa6 {
	roa6 { table dn42_roa6; };
	include "dn42_roa_bird2_6.conf";
};

# The Device protocol is not a real routing protocol. It does not generate any
# routes and it only serves as a module for getting information about network
# interfaces from the kernel. It is necessary in almost any configuration.
protocol device _device {
	scan time 10;
}

# The direct protocol is not a real routing protocol. It automatically generates
# direct routes to all network interfaces. Can exist in as many instances as you
# wish if you want to populate multiple routing tables with direct routes.
# protocol direct {
#	disabled;		# Disable by default
#	ipv4;			# Connect to default IPv4 table
#	ipv6;			# ... and to default IPv6 table
# }

# The Kernel protocol is not a real routing protocol. Instead of communicating
# with other routers in the network, it performs synchronization of BIRD
# routing tables with the OS kernel. One instance per table.
protocol kernel _kernel4 {
	scan time 20;
#	learn;               # Learn alien routes from the kernel
#	kernel table 10;     # Kernel table to synchronize with (default: main)

	ipv4 {               # Connect protocol to IPv4 table by channel
#		table master4;   # Default IPv4 table is master4
		import none;     # Import to table, default is import all
		export filter {  # Export to protocol. default is export none
			if source = RTS_STATIC && scope != SCOPE_LINK then reject;
			krt_prefsrc = my_ipv4;
			accept;
		};
	};
}

protocol kernel _kernel6 {
	scan time 20;

	ipv6 {
		import none;
		export filter {
			if source = RTS_STATIC && scope != SCOPE_LINK then reject;
			krt_prefsrc = my_ipv6;
			accept;
		};
	};
}

protocol static _static4 {
	ipv4;
	route my_whole4 reject;
}

protocol static _static6 {
	ipv6;
	route my_whole6 reject;
}
