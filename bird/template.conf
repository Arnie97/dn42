function print_bgp(string direction; int ip_version)
{
	print direction, ip_version, " from ", from, " (", proto, ") ", net, " via ", bgp_next_hop, " ", bgp_path;
}


function im_filter(bool border)
int ip_version;
prefix set my_net;
prefix set dn42_net;
bool roa_valid;
{
	if net.type = NET_IP4 then {
		ip_version = 4;
		my_net = my_net4;
		dn42_net = dn42_net4;
		roa_valid = roa_check(dn42_roa4, net, bgp_path.last) = ROA_VALID;
	} else if net.type = NET_IP6 then {
		ip_version = 6;
		my_net = my_net6;
		dn42_net = dn42_net6;
		roa_valid = roa_check(dn42_roa6, net, bgp_path.last) = ROA_VALID;
	}

	if !(net ~ dn42_net) || net ~ my_net then {
		if !border then {
			print_bgp("!import", ip_version);
			accept;
		}
		reject;
	} else if roa_valid then {
		print_bgp("import", ip_version);
		accept;
	} else {
		print_bgp("!reject", ip_version);
		reject;
	}
}


function ex_filter(bool border)
int ip_version;
prefix set dn42_net;
{
	if net.type = NET_IP4 then {
		ip_version = 4;
		dn42_net = dn42_net4;
	} else if net.type = NET_IP6 then {
		ip_version = 6;
		dn42_net = dn42_net6;
	}

	if !border then {
		print_bgp("!export", ip_version);
		accept;
	} else if net ~ dn42_net && source ~ [RTS_STATIC, RTS_BGP] then {
		bgp_path.delete(my_confed);
		print_bgp("export", ip_version);
		accept;
	} else {
		reject;
	}
}


template bgp dn42 {
	local as my_ext_as;
	path metric 1;

	ipv4 {
		import where im_filter(true);
		export where ex_filter(true);
		import limit 800 action block;
		export limit 800 action block;
	};

	ipv6 {
		import where im_filter(true);
		export where ex_filter(true);
		import limit 800 action block;
		export limit 800 action block;
	};
}


template bgp moerail {
	local as my_int_as;
	path metric 1;

	ipv4 {
		import where im_filter(false);
		export where ex_filter(false);
	};

	ipv6 {
		import where im_filter(false);
		export where ex_filter(false);
	};
}
