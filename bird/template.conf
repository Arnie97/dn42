function print_bgp(string direction)
int ip_version;
{
	if net.type = NET_IP4 then {
		ip_version = 4;
	} else if net.type = NET_IP6 then {
		ip_version = 6;
	}
	print direction, ip_version, " from ", proto, " (", from, ") ", net, " via ", bgp_next_hop, " ", bgp_path;
}


function im_filter(bool site; bool universe)
bool roa_valid;
{
	if net.type = NET_IP4 then {
		roa_valid = roa_check(dn42_roa4, net, bgp_path.last) = ROA_VALID;
	} else if net.type = NET_IP6 then {
		roa_valid = roa_check(dn42_roa6, net, bgp_path.last) = ROA_VALID;
	}

	if net ~ my_whole4 || net ~ my_whole6 then {
		scope = SCOPE_SITE;
	} else if net ~ dn42_net4 || net ~ dn42_net6 then {
		scope = SCOPE_ORGANIZATION;
	} else if net ~ bogon_net4 || net ~ bogon_net6 then {
		scope = SCOPE_SITE;
	} else {
		scope = SCOPE_UNIVERSE;
	}

	case scope {
	SCOPE_SITE:
		if site then {
			print_bgp("import site");
			accept;
		}
		reject;
	SCOPE_ORGANIZATION:
		if roa_valid then {
			print_bgp("import org");
			accept;
		} else {
			print_bgp("reject org");
			reject;
		}
	SCOPE_UNIVERSE:
		if universe then {
			print_bgp("import univ");
			accept;
		}
		reject;
	}
}


function ex_filter(bool site)
{
	if site then {
		print_bgp("export site");
		accept;
	} else if source !~ [RTS_STATIC, RTS_BGP] then {
		reject;
	} else if net ~ dn42_net4 || net ~ dn42_net6 then {
		bgp_path.delete(my_confed);
		print_bgp("export org");
		accept;
	} else {
		reject;
	}
}


template bgp dn42 {
	local as my_ext_as;
	path metric 1;

	ipv4 {
		next hop self;
		import where im_filter(false, false);
		export where ex_filter(false);
		import limit 800 action block;
		export limit 800 action block;
	};

	ipv6 {
		next hop self;
		import where im_filter(false, false);
		export where ex_filter(false);
		import limit 800 action block;
		export limit 800 action block;
	};
}


template bgp moerail {
	local as my_int_as;
	path metric 1;

	ipv4 {
		next hop self;
		import where im_filter(true, false);
		export where ex_filter(true);
	};

	ipv6 {
		next hop self;
		import where im_filter(true, false);
		export where ex_filter(true);
	};
}
