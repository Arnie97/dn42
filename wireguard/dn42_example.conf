# wg-quick configuration example for dn42 peering

[Interface]
ListenPort = <last5DigitsOfPeerASNumber>
PrivateKey = <myPrivateKey>
Table      = off
PostUp     = ip -4 addr add dev %i 172.<myTunnelIPv4>/32 peer 172.<peerTunnelIPv4>/32
PostUp     = ip -6 addr add dev %i fe80::<myLinkLocalIPv6>/128 peer fe80::<peerLinkLocalIPv6>/128
PostDown   = pkill -f "boringtun %i"

[Peer]
Endpoint   = <peerPublicIP>:<peerListenPort>
PublicKey  = <peerPublicKey>
AllowedIPs = fd00::/8
AllowedIPs = fe80::/10
AllowedIPs = 172.20.0.0/14
AllowedIPs = 172.31.0.0/16
AllowedIPs = 10.100.0.0/14
AllowedIPs = 10.127.0.0/16


# direct usage:

# sudo wg-quick up   dn42_example
# sudo wg-quick down dn42_example

# or, as a systemd unit:

# sudo systemctl start wg-quick@dn42_example
# sudo systemctl stop  wg-quick@dn42_example


# this example has been tested against the following implementations:

# - kernel 5.6+
# - wireguard-dkms
# - wireguard-go
# - boringtun


# additional guidance for userspace wireguard:
# (usually needed for OpenVZ or LXC containers)

# 1. compile the daemon
#
#    $ cargo install boringtun
#    $ sudo mv ~/.cargo/bin/boringtun /usr/local/bin
#    $ boringtun --version
#    boringtun 0.3.0

# 2. make sure you have proper permissions to /dev/net/tun (and /dev/net)
#
#    $ sudo chmod 0755 /dev/net
#    $ sudo chmod 0666 /dev/net/tun
#    $ cat /dev/net/tun
#    cat: /dev/net/tun: File descriptor in bad state

# 3. set the environment variables
#
#    $ export WG_SUDO=1 WG_QUICK_USERSPACE_IMPLEMENTATION=boringtun
#
#    for systemd unit:
#
#    $ systemctl edit wg-quick@
#    [Service]
#    Environment="WG_SUDO=1"
#    Environment="WG_QUICK_USERSPACE_IMPLEMENTATION=boringtun"

# 4. fire up and enjoy!
#
#    $ wg-quick up dn42_example
#    $ sudo wg show
#
#    search for "latest handshake" in the results to know if the link works.
#    if you've already got "peer: <peerPublicKey>" but not "latest handshake",
#    check your internet connection, firewall setup, and public keys.
